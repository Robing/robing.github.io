<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Html5 | Rainer's blog]]></title>
  <link href="http://Robing.github.io/tags/html5/atom.xml" rel="self"/>
  <link href="http://Robing.github.io/"/>
  <updated>2014-06-25T14:40:09+08:00</updated>
  <id>http://Robing.github.io/</id>
  <author>
    <name><![CDATA[Robin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shadow DOM 三]]></title>
    <link href="http://Robing.github.io/blog/2014/05/16/shadow-dom-301/"/>
    <updated>2014-05-16T12:21:36+08:00</updated>
    <id>http://Robing.github.io/blog/2014/05/16/shadow-dom-301</id>
    <content type="html"><![CDATA[<div class="content" id="article-content">
<p>This article discusses more of the amazing things you can do with Shadow DOM! It builds on the concepts discussed in <a href="http://Robing.github.io/tutorials/webcomponents/shadowdom/">Shadow DOM 101</a>
and <a href="http://Robing.github.io/tutorials/webcomponents/shadowdom-201/">Shadow DOM 201</a>.</p>
<p class="tip notice">In Chrome, turn on the "Enable experimental Web Platform features" in about:flags to experiment with everything covered in this article.</p>

<h2 id="toc-shadow-multiple">Using multiple shadow roots</h2>

<p>If you're hosting a party, it gets stuffy if everyone is crammed into the same room.
You want the option of distributing groups of people across multiple rooms. Elements hosting
Shadow DOM can do this too, that is to say, they can host more than one shadow
root at a time.</p>
<p>Let's see what happens if we try to attach multiple shadow roots to a host:</p>
    <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;example1&quot;</span><span class="nt">&gt;</span>Light DOM<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script&gt;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#example1&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">root1</span> <span class="o">=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">root2</span> <span class="o">=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">root1</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;div&gt;Root 1 FTW&lt;/div&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">root2</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;div&gt;Root 2 FTW&lt;/div&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="demodevtools"> 
<img src="http://rainer.qiniudn.com/stacking.png" title="Attaching multiple shadow trees" alt="Attaching multiple shadow trees" style="width:250px;">
</div>

<div class="demoarea">
  <div id="example1">Light DOM</div>
</div>

<script>
(function() {
var container = document.querySelector('#example1');
var root1 = container.createShadowRoot();
var root2 = container.createShadowRoot();
root1.innerHTML = '<div>Root 1 FTW</div>';
root2.innerHTML = '<div>Root 2 FTW</div>';
})();
</script>

<p class="notice tip">In the DevTools, turn on "Show Shadow DOM" to be
  able to inspect ShadowRoots.</p>

<p>What renders is "Root 2 FTW", despite the fact that we had already attached a shadow tree.
This is because the last shadow tree added to a host, wins. It's a LIFO stack as
far as rendering is concerned. Examining the DevTools verifies this behavior.</p>
<p class="notice fact">Shadow trees added to a host are stacked in the order they're added,
starting with the most recent first. The last one added is the one that renders.</p>

<blockquote class="commentary talkinghead" id="youngest-tree">
The most recently added tree is called the <b>younger tree</b>. Previous trees are called <b>older trees</b>. In this example, <code>root2</code> is the younger tree and  <code>root1</code> is the older tree.
</blockquote>

<p>So what's the point of using multiple shadows if only the last is invited to the
rendering party? Enter shadow insertion points.</p>
<h3 id="toc-shadow-insertion">Shadow Insertion Points</h3>

<!-- more -->

<p>"Shadow insertion points" (<code>&lt;shadow&gt;</code>) are similar to normal <a href="http://Robing.github.io/tutorials/webcomponents/shadowdom/#toc-separation-separate">insertion points</a> (<code>&lt;content&gt;</code>) in that they're placeholders. However, instead of being placeholders for a host's <em>content</em>, they're hosts for other <em>shadow trees</em>.
It's Shadow DOM Inception!</p>
<p>As you can probably imagine, things get more complicated the further you drill down
the rabbit hole. For this reason, the spec is very clear about what happens when
multiple <code>&lt;shadow&gt;</code> elements are in play:</p>
<p class="notice fact">If multiple <code>&lt;shadow&gt;</code> insertion points exist
in a shadow tree, only the first is recognized. The rest are ignored.</p>

<p>Looking back to our original example, the first shadow <code>root1</code> got left off the
invite list. Adding a <code>&lt;shadow&gt;</code> insertion point brings it back:</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;example2&quot;</span><span class="nt">&gt;</span>Light DOM<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#example2&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">root1</span> <span class="o">=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">root2</span> <span class="o">=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">root1</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;div&gt;Root 1 FTW&lt;/div&gt;&lt;content&gt;&lt;/content&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">root2</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;div&gt;Root 2 FTW&lt;/div&gt;&lt;shadow&gt;&lt;/shadow&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="demodevtools"> 
<img src="http://rainer.qiniudn.com/shadow-insertion-point.png" title="Shadow insertion points" alt="Shadow insertion points" style="width:250px;">
</div>

<div class="demoarea">
  <div id="example2">Light DOM</div>
</div>

<script>
(function() {
var container = document.querySelector('#example2');
var root1 = container.createShadowRoot();
var root2 = container.createShadowRoot();
root1.innerHTML = '<div>Root 1 FTW</div><content></content>';
root2.innerHTML = '<div>Root 2 FTW</div><shadow></shadow>';
})();
</script>

<p>There are a couple of interesting things about this example:</p>
<ol>
<li>"Root 2 FTW" still renders above "Root 1 FTW". This is because of where we've placed
the <code>&lt;shadow&gt;</code> insertion point. If you want the reverse, move the insertion point: <code>root2.innerHTML = '&lt;shadow&gt;&lt;/shadow&gt;&lt;div&gt;Root 2 FTW&lt;/div&gt;';</code>.</li>
<li>Notice there's now a <code>&lt;content&gt;</code> insertion point in root1. This makes
the text node "Light DOM" come along for the rendering ride.</li>
</ol>
<p><b id="toc-shadow-older">What's rendered at &lt;shadow&gt;?</b></p>
<p>Sometimes it's useful to know the older shadow tree being rendered at a <code>&lt;shadow&gt;</code>. You can get a reference to that tree through <code>.olderShadowRoot</code>:</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="nx">root2</span><span class="p">.</span><span class="nx">olderShadowRoot</span> <span class="o">===</span> <span class="nx">root1</span> <span class="c1">//true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="toc-get-shadowroot">Obtaining a host's shadow root</h2>

<p>If an element is hosting Shadow DOM you can access its <a href="#youngest-tree">youngest shadow root</a>
using <code>.shadowRoot</code>:</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">host</span><span class="p">.</span><span class="nx">shadowRoot</span> <span class="o">===</span> <span class="nx">root</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">shadowRoot</span><span class="p">);</span> <span class="c1">// null</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you're worried about people crossing into your shadows, redefine
 <code>.shadowRoot</code> to be null:</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">host</span><span class="p">,</span> <span class="s1">&#39;shadowRoot&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">null</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'>      <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A bit of a hack, but it works. In the end, it's important to remember that while amazingly fantastic,
<strong>Shadow DOM has not been designed to be a security feature</strong>. Don't rely on it for
complete content isolation.</p>
<h2 id="toc-creating-js">Building Shadow DOM in JS</h2>

<p>If you prefer building DOM in JS, <code>HTMLContentElement</code> and <code>HTMLShadowElement</code>
have interfaces for that.</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;example3&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;span&gt;</span>Light DOM<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#example3&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">root1</span> <span class="o">=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">root2</span> <span class="o">=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;Root 1 FTW&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">root1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// HTMLContentElement</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">content</span><span class="p">.</span><span class="nx">select</span> <span class="o">=</span> <span class="s1">&#39;span&#39;</span><span class="p">;</span> <span class="c1">// selects any spans the host node contains</span>
</span><span class='line'>    <span class="nx">root1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;Root 2 FTW&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">root2</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// HTMLShadowElement</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">shadow</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;shadow&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">root2</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">shadow</span><span class="p">);</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This example is nearly identical to the one in the <a href="#toc-shadow-insertion">previous section</a>.
The only difference is that now I'm using <code>select</code> to pull out the newly added <code>&lt;span&gt;</code>.</p>
<h2 id="toc-distributed-nodes">Working with insertion points</h2>

<p>Nodes that are selected out of the host element and "distribute" into the shadow tree
are called...drumroll...distributed nodes! They're allowed to cross the shadow boundary
when insertion points invite them in.</p>
<p>What's conceptually bizarre about insertion points is that they don't physically
move DOM. The host's nodes stay intact. Insertion points merely re-project nodes
from the host into the shadow tree. It's a presentation/rendering thing: <s>"Move these nodes over here"</s> "Render these nodes at this location."</p>
<p class="notice fact">You cannot traverse the DOM into a <code>&lt;content&gt;</code>.</p>

<p>For example:</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;div&gt;&lt;h2&gt;</span>Light DOM<span class="nt">&lt;/h2&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">createShadowRoot</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">root</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;content select=&quot;h2&quot;&gt;&lt;/content&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">h2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;h2&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;content[select=&quot;h2&quot;] h2&#39;</span><span class="p">));</span> <span class="c1">// null;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">).</span><span class="nx">contains</span><span class="p">(</span><span class="nx">h2</span><span class="p">));</span> <span class="c1">// false</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Voilà! The <code>h2</code> isn't a child of the shadow DOM. This leads to another tid bit:</p>
<blockquote class="commentary talkinghead">
Insertion points are incredibly powerful. Think of them as a way to create a
"declarative API" for your Shadow DOM. A host element can include all the markup in the world,
but unless I invite it into my Shadow DOM with an insertion point, it's meaningless.
</blockquote>

<h3 id="toc-getDistributedNodes">Element.getDistributedNodes()</h3>

<p>We can't traverse into a <code>&lt;content&gt;</code>, but the <code>.getDistributedNodes()</code> API
allows us to query the distributed nodes at an insertion point:</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;example4&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h2&gt;</span>Eric<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h2&gt;</span>Bidelman<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div&gt;</span>Digital Jedi<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h4&gt;</span>footer text<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;template</span> <span class="na">id=</span><span class="s">&quot;sdom&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;header&gt;</span>
</span><span class='line'>        <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;h2&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/header&gt;</span>
</span><span class='line'>      <span class="nt">&lt;section&gt;</span>
</span><span class='line'>        <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;div&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>      <span class="nt">&lt;footer&gt;</span>
</span><span class='line'>        <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;h4:first-of-type&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/footer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/template&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#example4&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#sdom&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">clone</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">importNode</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">clone</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="p">[].</span><span class="nx">forEach</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">html</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">outerHTML</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">nodes</span> <span class="o">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">getDistributedNodes</span><span class="p">();</span>
</span><span class='line'>      <span class="p">[].</span><span class="nx">forEach</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">nodes</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">html</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">outerHTML</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="nx">html</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div id="example4" style="display:none">
  <h2>Eric</h2>
  <h2>Bidelman</h2>
  <div>Digital Jedi</div>
  <h4>footer text</h4>
</div>

<p><template id="sdom">
  <header>
    <content select="h2"></content>
  </header>
  <section>
    <content select="div"></content>
  </section>
  <footer>
    <content select="h4:first-of-type"></content>
  </footer>
</template></p>
<div id="example4-log" class="demoarea none">
 <textarea readonly=""></textarea>
</div>

<script>
(function() {
if ('HTMLTemplateElement' in window) {
  var container = document.querySelector('#example4');

  var root1 = container.createShadowRoot();
  var t = document.querySelector('#sdom');
  var clone = document.importNode(t.content, true);
  root1.appendChild(clone);

  var html = [];
  [].forEach.call(root1.querySelectorAll('content'), function(el) {
    html.push(el.outerHTML + ': ');
    var nodes = el.getDistributedNodes();
    [].forEach.call(nodes, function(node) {
      html.push(node.outerHTML);
    });
    html.push('\n');
  });

  document.querySelector('#example4-log textarea').value = html.join('');
}
})();
</script>

<h3 id="toc-getDestinationInsertionPoints">Element.getDestinationInsertionPoints()</h3>

<p>Similar to <code>.getDistributedNodes()</code>, you can check what insertion points
a node is distributed into by calling its <code>.getDestinationInsertionPoints()</code>:</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;host&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h2&gt;</span>Light DOM<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">root1</span> <span class="o">=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">root2</span> <span class="o">=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">root1</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;content select=&quot;h2&quot;&gt;&lt;/content&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">root2</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;shadow&gt;&lt;/shadow&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">h2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#host h2&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">insertionPoints</span> <span class="o">=</span> <span class="nx">h2</span><span class="p">.</span><span class="nx">getDestinationInsertionPoints</span><span class="p">();</span>
</span><span class='line'>      <span class="p">[].</span><span class="nx">forEach</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">insertionPoints</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">contentEl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">contentEl</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div id="example5-gip" style="display:none">
  <h2>Light DOM</h2>
</div>

<div id="example5-getDestInsertinoPoints" class="demoarea none">
 <textarea readonly=""></textarea>
</div>

<script>
(function() {
if (!!Element.prototype.getDestinationInsertionPoints) { 
  var container = document.querySelector('#example5-gip');
  var h2 = container.querySelector('h2');

  var root1 = container.createShadowRoot();
  var root2 = container.createShadowRoot();
  root1.innerHTML = '<content select="h2"></content>';
  root2.innerHTML = '<shadow></shadow>';

  var html = [];
  var insertionPoints = h2.getDestinationInsertionPoints();
  [].forEach.call(insertionPoints, function(contentEl) {
    html.push(contentEl.outerHTML);
    html.push('\n');
  });

  document.querySelector('#example5-getDestInsertinoPoints textarea').value = html.join('');
}
})();
</script>

<h2 id="toc-shadow-visualizder">Tool: Shadow DOM Visualizer</h2>

<p>Understanding the black magic that is Shadow DOM is difficult. I remember trying
to wrap my head around it for the first time.</p>
<p>To help visualize how Shadow DOM rendering works, I've built a tool
using <a href="http://d3js.org/">d3.js</a>. Both markup boxes on the left-hand side are
editable. Feel free to paste in your own markup and play around to see how things
work and insertion points swizzle host nodes into the shadow tree.</p>
<figure>
<a href="http://html5-demos.appspot.com/static/shadowdom-visualizer/index.html"><img src="http://rainer.qiniudn.com/visualizer.png" title="Shadow DOM Visualizer" alt="Shadow DOM Visualizer"></a>
<figcaption><a href="http://html5-demos.appspot.com/static/shadowdom-visualizer/index.html">Launch Shadow DOM Visualizer</a></figcaption>
</figure>

<p>
<iframe width="420" height="315" src="http://www.youtube.com/embed/qnJ_s58ubxg" frameborder="0" allowfullscreen=""></iframe>
</p>

<p>Give it a try and let me know what you think!</p>
<h2 id="toc-events">Event Model</h2>

<p>Some events cross the shadow boundary and some do not. In the cases where events
cross the boundary, the event target is adjusted in order to maintain the
encapsulation that the shadow root's upper boundary provides. That is, <strong>events
are retargeted to look like they've come from the host element rather than internal
elements to the Shadow DOM</strong>.</p>
<p class="tip notice">Access <code>event.path</code> to see the adjusted event path.</p>

<p>If your browser supports Shadow DOM (it does<span class="featuresupported no">n't</span>),
you should see a play area below that helps visualize events. Elements in <span style="color:#ffcc00">yellow</span> are part of the Shadow DOM's markup. Elements in <span style="color:steelblue">blue</span> are
part of the host element. The <span style="color:#ffcc00">yellow</span> border
around "I'm a node in the host" signifies that it is a distributed node, passing
through the shadow's <code>&lt;content&gt;</code> insertion point.</p>
<p>The "Play Action" buttons show you different things to try. Give them a go to see
how the <code>mouseout</code> and <code>focusin</code> events bubble up to the main page.</p>
<div id="example5" class="demoarea none">
  <div data-host="">
    <div class="blue">I'm a node in the host</div>
  </div>

  <template style="display:none;"> <!-- display:none used for older browsers -->
    <style>
    .scopestyleforolderbrowsers * {
      border: 4px solid #FC0;
    }
    .scopestyleforolderbrowsers input {
      padding: 5px;
    }
    .scopestyleforolderbrowsers div {
      background: #FC0;
      padding: 5px;
      border-radius: 3px;
      margin: 5px 0;
    }
    content::-webkit-distributed(*) {
      border: 4px solid #FC0;
    }
    ::content * {
      border: 4px solid #FC0;
    }
    </style>
    <section class="scopestyleforolderbrowsers">
      <div>I'm a node in Shadow DOM</div>
      <div>I'm a node in Shadow DOM</div>
      <content></content>
      <input type="text" placeholder="I'm in Shadow DOM">
      <div>I'm a node in Shadow DOM</div>
      <div>I'm a node in Shadow DOM</div>
    </section>
  </template>

  <aside class="cursor"></aside>

  <div class="buttons">
    <button data-action="playAnimation" data-action-idx="1">Play Action 1</button><br>
    <button data-action="playAnimation" data-action-idx="2">Play Action 2</button><br>
    <button data-action="playAnimation" data-action-idx="3">Play Action 3</button><br>
    <button data-action="clearLog">Clear log</button>
  </div>

  <output></output>
</div>

<script>
(function() {
function stringify(node) {
  return node.outerHTML.match(".*?>")[0].replace('<', '&lt;').replace('>', '&gt;');
}

var out = document.querySelector('#example5 output');
var host = document.querySelector('#example5 [data-host]');
var wrapper = document.querySelector('#example5');

var root = host.createShadowRoot();
root.innerHTML = document.querySelector('#example5 template').innerHTML;

host.addEventListener('mouseout', function(e) {

  out.innerHTML += [
    '<span>[' + e.type + ']</span>', 
    'on:', stringify(e.target) + ',', 
    'from', stringify(e.fromElement),
    '&rarr;', stringify(e.toElement), '<br>'].join(' ');
  out.scrollTop = out.scrollHeight;
});

document.addEventListener('focusin', function(e) {
  out.innerHTML += [
    '<span>[' + e.type + ']</span>',
    'on:', stringify(e.target), '<br>'].join(' ');
  out.scrollTop = out.scrollHeight;
});

function clearLog() {
  out.innerHTML = '';
}

function cleanUpAnimations(node) {
  [].forEach.call(node.classList, function(c) {
    if (c.indexOf('animation') == 0) {
      node.classList.remove(c);
    }
  });
}

function playAnimation(idx) {
  clearLog();
  wrapper.classList.add('playing');
  wrapper.classList.add('animation' + idx);
}

wrapper.addEventListener('webkitAnimationEnd', function(e) {
  this.classList.remove('playing');
  cleanUpAnimations(this);
});

wrapper.addEventListener('animationend', function(e) {
  this.classList.remove('playing');
  cleanUpAnimations(this);
});

document.querySelector('#example5 .buttons').addEventListener('click', function(e) {
  if (e.target.tagName == 'BUTTON') {
    switch(e.target.dataset.action) {
      case 'clearLog':
        clearLog();
        break;
      case 'playAnimation':
        cleanUpAnimations(wrapper);
        playAnimation(parseInt(e.target.dataset.actionIdx));
        break;
      default:
        break;
    }
  }
});

})();
</script>

<p><strong>Play Action 1</strong></p>
<ul>
    <li>This one is interesting. You should see a <code>mouseout</code> from the host element (<code>&lt;div data-host&gt;</code>)
    to the <span style="color:steelblue">blue</span> node. Even though it's a distributed
    node, it's still in the host, not the ShadowDOM. Mousing further down into 
    <span style="color:#ffcc00">yellow</span> again causes a <code>mouseout</code> on the <span style="color:steelblue">blue</span> node.</li>
</ul>
<p><strong>Play Action 2</strong></p>
<ul>
    <li>There is one <code>mouseout</code> that appears on host (at the very end). Normally you'd
    see <code>mouseout</code> events trigger for all of the <span style="color:#ffcc00">yellow</span> blocks.
    However, in this case these elements are internal to the Shadow DOM and the event
    doesn't bubble through its upper boundary.</li>
</ul>
<p><strong>Play Action 3</strong></p>
<ul>
    <li>Notice that when you click the input, the <code>focusin</code> doesn't appear on the
    input but on the host node itself. It's been retargeted!</li>
</ul>
<h3 id="toc-events-stopped">Events that are always stopped</h3>

<p>The following events never cross the shadow boundary:</p>
<ul>
<li>abort</li>
<li>error</li>
<li>select</li>
<li>change</li>
<li>load</li>
<li>reset</li>
<li>resize</li>
<li>scroll</li>
<li>selectstart</li>
</ul>
<h2 id="toc-conclusion">Conclusion</h2>

<p>I hope you'll agree that <strong>Shadow DOM is incredibly powerful</strong>. For the first time ever, we have proper encapsulation without the extra baggage of <code>&lt;iframe&gt;</code>s or other older techniques. </p>
<p>Shadow DOM is certainly complex beast, but it's a beast worth adding to the web platform.
Spend some time with it. Learn it. Ask questions.</p>
<p>If you want to learn more, see Dominic's intro article <a href="http://Robing.github.io/tutorials/webcomponents/shadowdom/">Shadow DOM 101</a>
and my <a href="http://Robing.github.io/tutorials/webcomponents/shadowdom-201/">Shadow DOM 201: CSS &amp; Styling</a> article.</p>
<p class="small-notice">
Thanks to <a href="http://Robing.github.io/profiles/#dominiccooney">Dominic Cooney</a> and 
<a href="https://plus.google.com/111648463906387632236/posts">Dimitri Glazkov</a> for reviewing
the content of this tutorial.
</p><script>
document.addEventListener('DOMContentLoaded', function(e) {
  if (!isCompatible()) {
    document.body.classList.add('disabledemos');
    $('.featuresupported').removeClass('no');
  }
});
</script>

</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadow DOM 二]]></title>
    <link href="http://Robing.github.io/blog/2014/05/16/shadow-dom-201/"/>
    <updated>2014-05-16T12:16:18+08:00</updated>
    <id>http://Robing.github.io/blog/2014/05/16/shadow-dom-201</id>
    <content type="html"><![CDATA[<p><div class="content" id="article-content"></p>

<pre><code>&lt;p&gt;This article discusses more of the amazing things you can do with Shadow DOM. It builds on the concepts discussed in &lt;a href="http://Robing.github.io/tutorials/webcomponents/shadowdom/"&gt;Shadow DOM 101&lt;/a&gt;. If you're looking for an introduction, see that article.&lt;/p&gt;
&lt;h2 id="toc-intro"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Let's face it. There's nothing sexy about unstyled markup. Lucky for us, &lt;a href="http://w3c.github.io/webcomponents/explainer/#acknowledgements"&gt;the brilliant folks behind Web Components&lt;/a&gt;
    foresaw this and didn't leave us hanging. The &lt;a href="http://dev.w3.org/csswg/css-scoping/"&gt;CSS Scoping Module&lt;/a&gt; defines many options for styling content in a shadow tree.&lt;/p&gt;
&lt;p class="tip notice"&gt;In Chrome, turn on the "Enable experimental Web Platform features" in about:flags to experiment with everything covered in this article.&lt;/p&gt;
&lt;h2 id="toc-style-scoped"&gt;Style encapsulation&lt;/h2&gt;
&lt;p&gt;One of the core features of Shadow DOM is the &lt;a href="http://w3c.github.io/webcomponents/spec/shadow/#shadow-trees"&gt;shadow boundary&lt;/a&gt;. It has a lot of nice properties, but one of the best is that it provides style encapsulation for free. Stated another way:&lt;/p&gt;
&lt;p class="notice fact"&gt;CSS styles defined inside Shadow DOM are scoped to the ShadowRoot. This means styles are encapsulated by default.&lt;/p&gt;
&lt;p&gt;Below is an example. If all goes well and your browser supports Shadow DOM (it does
    &lt;span class="featuresupported no"&gt;n't&lt;/span&gt;!), you'll see "
    &lt;span style="color:red"&gt;Shadow DOM&lt;/span&gt;".&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="ni">&amp;lt;</span>div<span class="ni">&amp;gt;&amp;lt;</span>h3<span class="ni">&amp;gt;</span>Light DOM<span class="ni">&amp;lt;</span>/h3<span class="ni">&amp;gt;&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>script<span class="ni">&amp;gt;</span>
</span><span class='line'>        var root = document.querySelector(&#39;div&#39;).createShadowRoot();
</span><span class='line'>        root.innerHTML = &#39;<span class="ni">&amp;lt;</span>style<span class="ni">&amp;gt;</span>h3{ color: red; }<span class="ni">&amp;lt;</span>/style<span class="ni">&amp;gt;</span>&#39; + &#39;<span class="ni">&amp;lt;</span>h3<span class="ni">&amp;gt;</span>Shadow DOM<span class="ni">&amp;lt;</span>/h3<span class="ni">&amp;gt;</span>&#39;;
</span><span class='line'>    <span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;div class="demoarea none"&gt;
    &lt;div id="style-ex-scoped"&gt;
        &lt;h3&gt;Light DOM&lt;/h3&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
(function() {
    var container = document.querySelector('#style-ex-scoped');
    var root = container.createShadowRoot();
    root.innerHTML = '&lt;style&gt;h3{color: red;}&lt;/style&gt;&lt;h3&gt;Shadow DOM&lt;/h3&gt;';
})();
&lt;/script&gt;

&lt;p&gt;There are two interesting observations about this demo:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;There are
        &lt;a onclick=alertMsg() href="#"&gt;other h3s on this page&lt;/a&gt;, but the only one that matches the h3 selector, and therefore styled red, is the one in the ShadowRoot. Again, scoped styles by default.&lt;/li&gt;
    &lt;li&gt;Other styles rules defined on this page that target h3s don't bleed into my content. That's because
        &lt;strong&gt;selectors don't cross the shadow boundary&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;
var alertMsg = function(msg){
    if(msg){
        alert(msg)
    }else{
        len = document.querySelectorAll('h3').length;
        msg = 'There are ' + len + ' &lt;h3&gt; on this page.';
        alert(msg);
    }
    return false;
}
&lt;/script&gt;
&lt;p&gt;Moral of the story? We have style encapsulation from the outside world. Thanks Shadow DOM!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id="toc-style-host"&gt;Styling the host element&lt;/h2&gt;

&lt;p&gt;The
    &lt;code&gt;:host&lt;/code&gt;allows you to select and style the element hosting a shadow tree:&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="ni">&amp;lt;</span>button class=&quot;red&quot;<span class="ni">&amp;gt;</span>My Button<span class="ni">&amp;lt;</span>/button<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>script<span class="ni">&amp;gt;</span>
</span><span class='line'>    var button = document.querySelector(&#39;button&#39;);
</span><span class='line'>    var root = button.createShadowRoot();
</span><span class='line'>    root.innerHTML = &#39;<span class="ni">&amp;lt;</span>style<span class="ni">&amp;gt;</span>&#39; +
</span><span class='line'>        &#39;:host { text-transform: uppercase; }&#39; +
</span><span class='line'>        &#39;<span class="ni">&amp;lt;</span>/style<span class="ni">&amp;gt;</span>&#39; +
</span><span class='line'>        &#39;<span class="ni">&amp;lt;</span>content<span class="ni">&amp;gt;&amp;lt;</span>/content<span class="ni">&amp;gt;</span>&#39;;
</span><span class='line'>    <span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;div class="demoarea none"&gt;
    &lt;button id="style-athost" class="red"&gt;My Button&lt;/button&gt;
&lt;/div&gt;

&lt;script&gt;
(function() {
    var container = document.querySelector('#style-athost');
    var root = container.createShadowRoot();
    root.innerHTML = '&lt;style&gt;' +
        ':host { text-transform: uppercase; }' +
        '&lt;/style&gt;' +
        '&lt;content&gt;&lt;/content&gt;';
})();
&lt;/script&gt;

&lt;p&gt;One gotcha is that rules in the parent page have higher specificity than
    &lt;code&gt;:host&lt;/code&gt;
    rules defined in the element, but lower specificity than a
    &lt;code&gt;style&lt;/code&gt;attribute defined on the host element. This allows users to override your styling from the outside.
    &lt;code&gt;:host&lt;/code&gt;also only works in the context of a ShadowRoot so you can't use it outside of Shadow DOM.&lt;/p&gt;
&lt;p&gt;The functional form of
    &lt;code&gt;:host(&amp;lt;selector&amp;gt;)&lt;/code&gt;allows you to target the host element if it matches a
    &lt;code&gt;&amp;lt;selector&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
    &lt;strong&gt;Example&lt;/strong&gt;- match only if the element itself has the class
    &lt;code&gt;.different&lt;/code&gt;(e.g..
    &lt;code&gt;&amp;lt;x-foo class="different"&amp;gt;&amp;lt;/x-foo&amp;gt;&lt;/code&gt;):&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>    <span class="nd">:host</span><span class="o">(</span><span class="nc">.different</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;h3 id="toc-style-states"&gt;Reacting to user states&lt;/h3&gt;

&lt;p&gt;A common use case for
    &lt;code&gt;:host&lt;/code&gt;is when you're creating a &lt;a href="http://Robing.github.io/tutorials/webcomponents/customelements/"&gt;Custom Element&lt;/a&gt; and want to react to different user states (:hover, :focus, :active, etc.).&lt;/p&gt;
        <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>            <span class="ni">&amp;lt;</span>style<span class="ni">&amp;gt;</span>
</span><span class='line'>    :host {
</span><span class='line'>      opacity: 0.4;
</span><span class='line'>      transition: opacity 420ms ease-in-out;
</span><span class='line'>    }
</span><span class='line'>    :host(:hover) {
</span><span class='line'>      opacity: 1;
</span><span class='line'>    }
</span><span class='line'>    :host(:active) {
</span><span class='line'>      position: relative;
</span><span class='line'>      top: 3px;
</span><span class='line'>      left: 3px;
</span><span class='line'>    }
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/style&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;div class="demoarea none"&gt;
    &lt;button id="style-athost-ex2"&gt;My Button&lt;/button&gt;
&lt;/div&gt;

&lt;script&gt;
(function() {
    var container = document.querySelector('#style-athost-ex2');
    var root = container.createShadowRoot();
    root.innerHTML = '&lt;style&gt;\
  :host {\
    opacity: 0.4;\
    transition: opacity 200ms ease-in-out;\
  }\
  :host(:active) { position:relative;top:3px;left:3px; }\
  :host(:hover) {\
    opacity: 1;\
  }\
}&lt;/style&gt;&lt;content&gt;&lt;/content&gt;';
})();
&lt;/script&gt;

&lt;h3 id="toc-style-themeing"&gt;Theming an element&lt;/h3&gt;

&lt;p&gt;The
    &lt;code&gt;:host-context(&amp;lt;selector&amp;gt;)&lt;/code&gt;pseudo class matches the host element if it or any of its ancestors matches
    &lt;code&gt;&amp;lt;selector&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A common use of
    &lt;code&gt;:host-context()&lt;/code&gt;is for theming an element based on its surrounds. For example, many people do theming by applying a class to
    &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;or
    &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;:&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="ni">&amp;lt;</span>body class=&quot;different&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>x-foo<span class="ni">&amp;gt;&amp;lt;</span>/x-foo<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/body<span class="ni">&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;p&gt;You can
    &lt;code&gt;:host-context(.different)&lt;/code&gt;to style
    &lt;code&gt;&amp;lt;x-foo&amp;gt;&lt;/code&gt;when it's a descendant of an element with the class
    &lt;code&gt;.different&lt;/code&gt;:&lt;/p&gt;
</code></pre>

<p>   <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">pre</span><span class="o">&gt;&lt;</span><span class="nt">code</span><span class="o">&gt;</span>    <span class="nd">:host-context</span><span class="o">(</span><span class="nc">.different</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;p&gt;This gives you the ability encapsulate style rules in an element's Shadow DOM that uniquely style it, based on its context.&lt;/p&gt;
&lt;h3 id="toc-style-multi"&gt;Support multiple host types from within one shadow root&lt;/h3&gt;

&lt;p&gt;Another use for
    &lt;code&gt;:host&lt;/code&gt;is if you're creating a theming library and want to support styling many types of host elements from within the same Shadow DOM.&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>    <span class="nd">:host</span><span class="o">(</span><span class="nt">x-foo</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c">/* Applies if the host is a &amp;lt;x-foo&amp;gt; element.*/</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">:host</span><span class="o">(</span><span class="nt">x-foo</span><span class="nd">:host</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c">/* Same as above. Applies if the host is a &amp;lt;x-foo&amp;gt; element. */</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">:host</span><span class="o">(</span><span class="nt">div</span><span class="o">)</span> <span class="p">{</span>  <span class="err">{</span>
</span><span class='line'>          <span class="c">/* Applies if the host element is a &amp;lt;div&amp;gt;. */</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;h2 id="toc-style-cat-hat"&gt;Styling Shadow DOM internals from the outside&lt;/h2&gt;

&lt;p&gt;The
    &lt;code&gt;::shadow&lt;/code&gt;pseudo-element and
    &lt;code&gt;/deep/&lt;/code&gt;combinator are like having a Vorpal sword of CSS authority. They allow piercing through Shadow DOM's boundary to style elements within shadow trees.&lt;/p&gt;
&lt;h3 id="toc-style-hat"&gt;The ::shadow pseudo-element&lt;/h3&gt;

&lt;p&gt;If an element has at least one shadow tree, the
    &lt;code&gt;::shadow&lt;/code&gt;pseudo-element matches the shadow root itself. It allows you to write selectors that style nodes internal to an element's shadow dom.&lt;/p&gt;
&lt;p&gt;For example, if an element is hosting a shadow root, you can write
    &lt;code&gt;#host::shadow span {}&lt;/code&gt;to style all of the spans within its shadow tree.&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="ni">&amp;lt;</span>style<span class="ni">&amp;gt;</span>
</span><span class='line'>      #host::shadow span {
</span><span class='line'>        color: red;
</span><span class='line'>      }
</span><span class='line'>    <span class="ni">&amp;lt;</span>/style<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="ni">&amp;lt;</span>div id=&quot;host&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>span<span class="ni">&amp;gt;</span>Light DOM<span class="ni">&amp;lt;</span>/span<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="ni">&amp;lt;</span>script<span class="ni">&amp;gt;</span>
</span><span class='line'>      var host = document.querySelector(&#39;div&#39;);
</span><span class='line'>      var root = host.createShadowRoot();
</span><span class='line'>      root.innerHTML = &quot;<span class="ni">&amp;lt;</span>span<span class="ni">&amp;gt;</span>Shadow DOM<span class="ni">&amp;lt;</span>/span<span class="ni">&amp;gt;</span>&quot; +
</span><span class='line'>                       &quot;<span class="ni">&amp;lt;</span>content<span class="ni">&amp;gt;&amp;lt;</span>/content<span class="ni">&amp;gt;</span>&quot;;
</span><span class='line'>    <span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;div class="demoarea none"&gt;
    &lt;div id="style-hat-ex"&gt;
        &lt;span&gt;Light DOM&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
(function() {
    var host = document.querySelector('#style-hat-ex');
    var root = host.createShadowRoot();
    root.innerHTML = '&lt;span&gt;Shadow DOM&lt;/span&gt;' +
        '&lt;content&gt;&lt;/content&gt;';
})();
&lt;/script&gt;

&lt;p&gt;
    &lt;strong&gt;Example&lt;/strong&gt;(custom elements) -
    &lt;code&gt;&amp;lt;x-tabs&amp;gt;&lt;/code&gt;has
    &lt;code&gt;&amp;lt;x-panel&amp;gt;&lt;/code&gt;children in its Shadow DOM. Each panel hosts its own shadow tree containing
    &lt;code&gt;h2&lt;/code&gt;headings. To style those headings from the main page, one could write:&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>    <span class="nt">x-tabs</span><span class="o">:</span><span class="nd">:shadow</span> <span class="nt">x-panel</span><span class="o">:</span><span class="nd">:shadow</span> <span class="nt">h2</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;h3 id="toc-style-cat"&gt;The /deep/ combinator&lt;/h3&gt;

&lt;p&gt;The
    &lt;code&gt;/deep/&lt;/code&gt;combinator is similar to
    &lt;code&gt;::shadow&lt;/code&gt;, but more powerful. It completely ignores all shadow boundaries and crosses into any number of shadow trees. Put simply,
    &lt;code&gt;/deep/&lt;/code&gt;allows you to drill into an element's guts and target any node.&lt;/p&gt;
&lt;p&gt;The
    &lt;code&gt;/deep/&lt;/code&gt;combinator is particularly useful in the world of Custom Elements where it's common to have multiple levels of Shadow DOM. Prime examples are nesting a bunch of custom elements (each hosting their own shadow tree) or creating an element that inherits from another using
    &lt;a href="http://Robing.github.io/tutorials/webcomponents/shadowdom-301/#toc-shadow-insertion"&gt;&lt;code&gt;&amp;lt;shadow&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
    &lt;strong&gt;Example&lt;/strong&gt;(custom elements) - select all&lt;code&gt;&amp;lt;x-panel&amp;gt;&lt;/code&gt;elements that are descendants of&lt;code&gt;&amp;lt;x-tabs&amp;gt;&lt;/code&gt;, anywhere in the tree:&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>    <span class="nt">x-tabs</span> <span class="o">/</span><span class="nt">deep</span><span class="o">/</span> <span class="nt">x-panel</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;p&gt;
    &lt;strong&gt;Example&lt;/strong&gt;- style all elements with the class&lt;code&gt;.library-theme&lt;/code&gt;, anywhere in a shadow tree:&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>    <span class="nt">body</span> <span class="o">/</span><span class="nt">deep</span><span class="o">/</span> <span class="nc">.library-theme</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;h3 id="toc-css-traverasl"&gt;Working with querySelector()&lt;/h3&gt;

&lt;p&gt;Just like
    &lt;a href="http://Robing.github.io/tutorials/webcomponents/shadowdom-301/#toc-get-shadowroot"&gt;&lt;code&gt;.shadowRoot&lt;/code&gt;
    &lt;/a&gt;opens shadow trees up for DOM traversal, the combinators open shadow trees for selector traversal. Instead of writing a nested chain of madness, you can write a single statement:&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="c1">// No fun.</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;x-tabs&#39;</span><span class="p">).</span><span class="nx">shadowRoot</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;x-panel&#39;</span><span class="p">).</span><span class="nx">shadowRoot</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#foo&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Fun.</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;x-tabs::shadow x-panel::shadow #foo&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;h3 id="toc-style-native"&gt;Styling native elements&lt;/h3&gt;

&lt;p&gt;Native HTML controls are a challenge to style. Many people simply give up and roll their own. However, with
    &lt;code&gt;::shadow&lt;/code&gt;and
    &lt;code&gt;/deep/&lt;/code&gt;, any element in the web platform that uses Shadow DOM can be styled. Great examples are the
    &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;types and
    &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;:&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>    <span class="nt">video</span> <span class="o">/</span><span class="nt">deep</span><span class="o">/</span> <span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s2">&quot;range&quot;</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">background</span><span class="o">:</span> <span class="nb">hotpink</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;div class="demoarea none"&gt;
    &lt;video id="ex-style-video" controls=""&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;blockquote class="commentary talkinghead"&gt;
    Do the
    &lt;code&gt;::shadow&lt;/code&gt;pseudo-element and
    &lt;code&gt;/deep/&lt;/code&gt;combinator defeat the purpose of style encapsulation? Out of the box, Shadow DOM prevents
    &lt;em&gt;accidental&lt;/em&gt;styling from outsiders but it never promises to be a bullet proof vest. Developers should be allowed to
    &lt;em&gt;intentionally&lt;/em&gt;style inner parts of your Shadow tree...if they know what they're doing. Having more control is also good for flexibility, theming, and the re-usability of your elements.
&lt;/blockquote&gt;

&lt;h2 id="toc-style-hooks"&gt;Creating style hooks&lt;/h2&gt;

&lt;p&gt;Customization is good. In certain cases, you may want to poke holes in your Shadow's styling shield and create hooks for others to style.&lt;/p&gt;
&lt;h3 id="toc-custom-pseduo"&gt;Using ::shadow and /deep/&lt;/h3&gt;

&lt;p&gt;There's a lot of power behind
    &lt;code&gt;/deep/&lt;/code&gt;. It gives component authors a way to designate individual elements as styleable or a slew of elements as themeable.&lt;/p&gt;
&lt;p&gt;
    &lt;strong&gt;Example&lt;/strong&gt;- style all elements that have the class
    &lt;code&gt;.library-theme&lt;/code&gt;, ignoring all shadow trees:&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>    <span class="nt">body</span> <span class="o">/</span><span class="nt">deep</span><span class="o">/</span> <span class="nc">.library-theme</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;p&gt;&lt;/p&gt;
&lt;h3 id="toc-vars"&gt;Using CSS Variables&lt;/h3&gt;

&lt;p&gt;A powerful way to create theming hooks will be through &lt;a href="http://dev.w3.org/csswg/css-variables/"&gt;CSS Variables&lt;/a&gt;. Essentially, creating "style placeholders" for other users to fill in.&lt;/p&gt;
&lt;p&gt;Imagine a custom element author who marks out variable placeholders in their Shadow DOM. One for styling an internal button's font and another for its color:&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>    <span class="nt">button</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">color</span><span class="o">:</span> <span class="o">+</span><span class="n">var</span> <span class="p">(</span><span class="n">button</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="k">color</span><span class="o">,</span> <span class="nb">pink</span><span class="p">);</span> <span class="c">/* default color will be pink */</span>
</span><span class='line'>      <span class="k">font</span><span class="o">:</span> <span class="o">+</span><span class="n">var</span> <span class="p">(</span><span class="n">button</span><span class="o">-</span><span class="k">font</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;p&gt;Then, the embedder of the element defines those values to their liking. Perhaps to match the super cool Comic Sans theme of their own page:&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>    <span class="nf">#host</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">+</span><span class="n">var</span><span class="o">-</span><span class="n">button</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="k">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'>      <span class="o">+</span><span class="n">var</span><span class="o">-</span><span class="n">button</span><span class="o">-</span><span class="k">font</span><span class="o">:</span> <span class="s2">&quot;Comic Sans MS&quot;</span><span class="o">,</span> <span class="s2">&quot;Comic Sans&quot;</span><span class="o">,</span> <span class="k">cursive</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;p&gt;Due to the way CSS Variables inherit, everything is peachy and this works beautifully! The whole picture looks like this:&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>    <span class="o">&amp;</span><span class="nt">lt</span><span class="o">;</span><span class="nt">style</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span>
</span><span class='line'>      <span class="nf">#host</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">+</span><span class="n">var</span><span class="o">-</span><span class="n">button</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="k">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'>        <span class="o">+</span><span class="n">var</span><span class="o">-</span><span class="n">button</span><span class="o">-</span><span class="k">font</span><span class="o">:</span> <span class="s2">&quot;Comic Sans MS&quot;</span><span class="o">,</span> <span class="s2">&quot;Comic Sans&quot;</span><span class="o">,</span> <span class="k">cursive</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nt">lt</span><span class="o">;/</span><span class="nt">style</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nt">lt</span><span class="o">;</span><span class="nt">div</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;host&quot;</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span><span class="nt">Host</span> <span class="nt">node</span><span class="o">&amp;</span><span class="nt">lt</span><span class="o">;/</span><span class="nt">div</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nt">lt</span><span class="o">;</span><span class="nt">script</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="nt">var</span> <span class="nt">root</span> <span class="o">=</span> <span class="nt">document</span><span class="nc">.querySelector</span><span class="o">(</span><span class="s1">&#39;#host&#39;</span><span class="o">)</span><span class="nc">.createShadowRoot</span><span class="o">();</span>
</span><span class='line'>    <span class="nt">root</span><span class="nc">.innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;style&amp;gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s1">&#39;button {&#39;</span> <span class="o">+</span>
</span><span class='line'>          <span class="s1">&#39;color: +var (button-text-color, pink);&#39;</span> <span class="o">+</span>
</span><span class='line'>          <span class="s1">&#39;font: +var (button-font) ;&#39;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s1">&#39;}&#39;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s1">&#39;&amp;lt;/style&amp;gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s1">&#39;&amp;lt;content&amp;gt;&amp;lt;/content&amp;gt;&#39;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nt">lt</span><span class="o">;/</span><span class="nt">script</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;blockquote class="commentary talkinghead"&gt;
    I've already mentioned &lt;a href="http://Robing.github.io/tutorials/webcomponents/customelements/"&gt;Custom Elements&lt;/a&gt; a few times in this article. For now, just know that Shadow DOM forms their structural foundation by providing styling and DOM encapsulation. The concepts here pertain to styling Custom Elements.
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;
&lt;h2 id="toc-style-disbtributed-nodes"&gt;Styling distributed nodes&lt;/h2&gt;

&lt;p&gt;Distributed nodes are elements that render at an &lt;a href="http://Robing.github.io/tutorials/webcomponents/shadowdom-301/#toc-distributed-nodes"&gt;insertion point&lt;/a&gt; (a
    &lt;code&gt;&amp;lt;content&amp;gt;&lt;/code&gt;element). The
    &lt;code&gt;&amp;lt;content&amp;gt;&lt;/code&gt;element allows you to select nodes from the Light DOM and render them at predefined locations in your Shadow DOM. They're not logically in the Shadow DOM; they're still children of the host element. Insertion points are just a rendering thing.&lt;/p&gt;
&lt;p&gt;Distributed nodes retain styles from the main document. That is, style rules from the main page continue to apply to the elements, even when they render at an insertion point. Again, distributed nodes are still logically in the light dom and don't move. They just render elsewhere. However, when the nodes get distributed into the Shadow DOM, they can take on additional styles defined inside the shadow tree.&lt;/p&gt;
&lt;h3 id="toc-distributed"&gt;::content pseudo element&lt;/h3&gt;

&lt;p&gt;Distributed nodes are children of the host element, so how can we target them from
    &lt;em&gt;within&lt;/em&gt;the Shadow DOM? The answer is the CSS
    &lt;code&gt;::content&lt;/code&gt;pseudo element. It's a way to target Light DOM nodes that pass through an insertion point. For example:&lt;/p&gt;
&lt;p&gt;
    &lt;code&gt;::content &amp;gt; h3&lt;/code&gt;styles any
    &lt;code&gt;h3&lt;/code&gt;tags that pass through an insertion point.&lt;/p&gt;
&lt;p&gt;Let's see an example:&lt;/p&gt;
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>    <span class="o">&amp;</span><span class="nt">lt</span><span class="o">;</span><span class="nt">div</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="nt">lt</span><span class="o">;</span><span class="nt">h3</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span><span class="nt">Light</span> <span class="nt">DOM</span><span class="o">&amp;</span><span class="nt">lt</span><span class="o">;/</span><span class="nt">h3</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="nt">lt</span><span class="o">;</span><span class="nt">section</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="nt">lt</span><span class="o">;</span><span class="nt">div</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span><span class="nt">I</span><span class="s1">&#39;m not underlined&amp;lt;/div&amp;gt;</span>
</span><span class='line'><span class="s1">        &amp;lt;p&amp;gt;I&#39;</span><span class="nt">m</span> <span class="nt">underlined</span> <span class="nt">in</span> <span class="nt">Shadow</span> <span class="nt">DOM</span><span class="o">!&amp;</span><span class="nt">lt</span><span class="o">;/</span><span class="nt">p</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="nt">lt</span><span class="o">;/</span><span class="nt">section</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nt">lt</span><span class="o">;/</span><span class="nt">div</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&amp;</span><span class="nt">lt</span><span class="o">;</span><span class="nt">script</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="nt">var</span> <span class="nt">div</span> <span class="o">=</span> <span class="nt">document</span><span class="nc">.querySelector</span><span class="o">(</span><span class="s1">&#39;div&#39;</span><span class="o">);</span>
</span><span class='line'>    <span class="nt">var</span> <span class="nt">root</span> <span class="o">=</span> <span class="nt">div</span><span class="nc">.createShadowRoot</span><span class="o">();</span>
</span><span class='line'>    <span class="nt">root</span><span class="nc">.innerHTML</span> <span class="o">=</span> <span class="s1">&#39;\</span>
</span><span class='line'><span class="s1">        &amp;lt;style&amp;gt;\</span>
</span><span class='line'><span class="s1">          h3 { color: red; }\</span>
</span><span class='line'><span class="s1">          content[select=&quot;h3&quot;]::content &amp;gt; h3 {\</span>
</span><span class='line'><span class="s1">            color: green;\</span>
</span><span class='line'><span class="s1">          }\</span>
</span><span class='line'><span class="s1">          ::content section p {\</span>
</span><span class='line'><span class="s1">            text-decoration: underline;\</span>
</span><span class='line'><span class="s1">          }\</span>
</span><span class='line'><span class="s1">        &amp;lt;/style&amp;gt;\</span>
</span><span class='line'><span class="s1">        &amp;lt;h3&amp;gt;Shadow DOM&amp;lt;/h3&amp;gt;\</span>
</span><span class='line'><span class="s1">        &amp;lt;content select=&quot;h3&quot;&amp;gt;&amp;lt;/content&amp;gt;\</span>
</span><span class='line'><span class="s1">        &amp;lt;content select=&quot;section&quot;&amp;gt;&amp;lt;/content&amp;gt;&#39;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nt">lt</span><span class="o">;/</span><span class="nt">script</span><span class="o">&amp;</span><span class="nt">gt</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
&lt;div class="demoarea none"&gt;
    &lt;div id="style-ex-distributed"&gt;
        &lt;h3&gt;Light DOM&lt;/h3&gt;
        &lt;section&gt;
            &lt;div&gt;I'm not underlined&lt;/div&gt;
            &lt;p&gt;I'm underlined in Shadow DOM!&lt;/p&gt;
        &lt;/section&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
(function() {
    var container = document.querySelector('#style-ex-distributed');
    var root = container.createShadowRoot();
    root.innerHTML = '\
</code></pre>

<p>  <style>\</p>

<pre><code>h3 { color: red; }\
content[select="h3"]::content &gt; h3 {\
  color: green;\
}\
::content section p {\
  text-decoration: underline;\
}\
</code></pre>

<p>  </style>\
  <h3>Shadow DOM</h3>\
  <content select="h3"></content>\
  <content select="section"></content>&lsquo;;</p>

<pre><code>})();
&lt;/script&gt;

&lt;p&gt;You should see "
    &lt;span style="color:red"&gt;Shadow DOM&lt;/span&gt;" and "
    &lt;span style="color:green"&gt;Light DOM&lt;/span&gt;" below it. Also note that "Light DOM" is still retaining the styles (margins etc.) defined on this page. That's because the page's styles still match!&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;


&lt;blockquote class="commentary talkinghead"&gt;
    Remember: styles defined in the host document continue to apply to nodes they target, even when those nodes get distributed "inside" the Shadow DOM. Going into an insertion point doesn't change what's applied.
&lt;/blockquote&gt;

&lt;h2 id="toc-conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As authors of custom elements, we have a ton of options for controlling the look and feel of our content. Shadow DOM forms the basis for this brave new world.&lt;/p&gt;
&lt;p&gt;Shadow DOM gives us scoped style encapsulation and a means to let in as much (or as little) of the outside world as we choose. By defining custom pseudo elements or including CSS Variable placeholders, authors can provide third-parties convenient styling hooks to further customize their content. All in all, web authors are in full control of how their content is represented.&lt;/p&gt;
&lt;p class="small-notice"&gt;
    Thanks to &lt;a href="http://Robing.github.io/profiles/#dominiccooney"&gt;Dominic Cooney&lt;/a&gt; and
    &lt;a href="https://plus.google.com/111648463906387632236/posts"&gt;Dimitri Glazkov&lt;/a&gt; for reviewing the content of this tutorial.
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;
&lt;aside class="panel"&gt;
    &lt;h2&gt;Related reading&lt;/h2&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href="http://Robing.github.io/tutorials/webcomponents/shadowdom/"&gt;Shadow DOM 101&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href="http://Robing.github.io/tutorials/webcomponents/shadowdom-301/"&gt;Shadow DOM 301 - Advanced Concepts &amp;amp; DOM APIs&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href="http://Robing.github.io/tutorials/webcomponents/customelements/"&gt;Custom Elements - defining new elements in HTML&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;/p&gt;
&lt;script&gt;
document.addEventListener('DOMContentLoaded', function(e) {
    if (!isCompatible()) {
        document.body.classList.add('disabledemos');
        $('.featuresupported').removeClass('no');
    }
});
&lt;/script&gt;
</code></pre>

<p></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadow DOM 一]]></title>
    <link href="http://Robing.github.io/blog/2014/05/16/shadow-dom-101/"/>
    <updated>2014-05-16T10:09:17+08:00</updated>
    <id>http://Robing.github.io/blog/2014/05/16/shadow-dom-101</id>
    <content type="html"><![CDATA[<div class="content" id="article-content">        
<p></p>

<h2 id="toc-introduction">介绍</h2>

<p>
Web 组件是一系列前沿规范，它：
</p>

<ol>
<li>使得构建部件(widget)成为可能</li>
<li>…重用更为可靠</li>
<li>
…即便后续版本的组件修改了内部实现细节也不会使页面出错。
</li>
</ol>

<p>
这是否意味着你得决定什么时候用 HTML/JavaScript，什么时候用 Web 组件？不！HTML 和 JavaScript 可以制作交互式可视化内容，
部件也是交互式可视化内容。在开发部件的过程中自然而然的就会利用你的 HTML 和 JavaScript 技巧。Web 组件标准就是以此为目的而设计的。
</p>

<blockquote class="commentary talkinghead">
若是使用别的技术来构建部件却也说不通。比如，我就肯定不会推荐你用 <code>&lt;canvas&gt;</code> 来写部件。它确实可靠——如果你修改绘制的内容也不会破坏页面——但它对可访问性(accessibility)，索引(indexing)，组合(composition)，分辨率无关(resolution independence)都不友好。
</blockquote>

<p>
但有个根本问题，导致 HTML 和 JavaScript 构建出来的部件难以使用：部件中的 DOM 树并没有封装起来。
封装的缺乏意味着文档中的样式表会无意中影响部件中的某些部分；
JavaScript 可能在无意中修改部件中的某些部分；你书写的 ID 也可能会把部件内部的 ID 覆盖。
</p>

<blockquote class="commentary">
缺乏封装的一个明显缺点在于：如果你更新了库或者部件的 DOM 更改了内部细节，你的样式和脚本就可能在不经意间遭到破坏。
</blockquote>

<p>
Web 组件由四部分组成：
</p>

<ol>
<li><a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/templates/index.html">Templates</a></li>
<li><a href="http://www.w3.org/TR/shadow-dom/">Shadow
DOM</a></li>
<li><a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/custom/index.html">Custom
Elements</a></li>
<li><a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/explainer/index.html#external-custom-elements-and-decorators">Packaging</a></li>
</ol>

<p>
<b>Shadow DOM</b> 解决了 DOM 树的封装问题。Web 组件的四部分被设计成配合工作，但你也可以选择 Web 组件中的某个部分来使用。该教程将教会你如何使用 Shadow DOM。
</p>

<p class="notice">
<b>注意：</b> Chrome 25+ 支持 Shadow DOM，但 API 需要加 <code>webkit</code> 前缀。 在 Chrome 的最新版本中增加了无前缀的 API，可以通过开启 <code>about:flags</code> 下的 "实验性网络平台功能"来使用。
</p>

<h2 id="toc-hello-world">Hello, Shadow World</h2>

<p>
有了 Shadow DOM，元素就可以和一个新类型的节点关联。这个新类型的节点称为 <b>shadow root。</b>与一个 shadow root 关联的元素称作一个 <b>shadow host。</b>shadow host 的内容不会渲染；shadow root 的内容会渲染。
</p>
<!-- more -->
<p>
比如，你拥有如下的标记：
</p>

<span class="tag">&lt;button&gt;</span><span class="pln">Hello, world!</span><span class="tag">&lt;/button&gt;</span><span class="pln">
</span><span class="tag">&lt;script&gt;</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> host </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">querySelector</span><span class="pun">(</span><span class="str">'button'</span><span class="pun">);</span><span class="pln">
</span><b><span class="kwd">var</span><span class="pln"> root </span><span class="pun">=</span><span class="pln"> host</span><span class="pun">.</span><span class="pln">createShadowRoot</span><span class="pun">();</span></b><span class="pln">
root</span><span class="pun">.</span><span class="pln">textContent </span><span class="pun">=</span><span class="pln"> </span><span class="str">'こんにちは、影の世界!'</span><span class="pun">;</span><span class="pln">
</span><span class="tag">&lt;/script&gt;</span>


<p>因此，相比显示以下内容</p>

<button id="ex1a">Hello, world!</button>
<script>
function remove(selector) {
  Array.prototype.forEach.call(
      document.querySelectorAll(selector),
      function (node) { node.parentNode.removeChild(node); });
}

if (!HTMLElement.prototype.webkitCreateShadowRoot) {
  remove('#ex1a');
  document.write('<img src="SS1.png" alt="Screenshot of a button with \'Hello, world!\' on it.">');
}
</script>

<p>页面将会呈现如下内容</p>

<button id="ex1b">Hello, world!</button>
<script>
(function () {
  if (!HTMLElement.prototype.webkitCreateShadowRoot) {
    remove('#ex1b');
    document.write('<img src="SS2.png" alt="Screenshot of a button with \'Hello, shadow world!\' in Japanese on it.">');
    return;
  }
  var host = document.querySelector('#ex1b');
  var root = host.webkitCreateShadowRoot();
  root.textContent = 'こんにちは、影の世界!';
})();
</script>

<p>
不仅如此，若页面中的 JavaScript 想获得按钮的 <span class="property">textContent</span> 是什么，它不会得到 “こんにちは、影の世界!”，而是 “Hello, world!”，因为 shadow root 下的 DOM 子树被封装了起来。
</p>

<p>
介绍一个(可能不被遵守的)经验法则，
你不应该把<em>内容</em>放到 Shadow DOM 中。内容必须放入文档内以便屏幕阅读器，搜索引擎，扩展等类似程序可以访问到。
在创建一个吸引人的，可重用的部件时，那些无意义的标记要放进 Shadow DOM 中，可内容还得留在页面里。
</p>

<blockquote class="commentary talkinghead">
当然，这并不是必须遵守的；在 web 上你可以按照自己的喜好来做。但千万别过火。
</blockquote>

<h2 id="toc-separation">从展现中分离内容</h2>

<p>
现在我们来看看如何使用 Shadow DOM 来将内容从展现中分离出来。假设我们拥有如下姓名卡：
</p>
<style>
.ex2a.outer {
  border: 2px solid brown;
  border-radius: 1em;
  background: red;
  font-size: 20pt;
  width: 12em;
  height: 7em;
  text-align: center;
}
.ex2a .boilerplate {
  color: white;
  font-family: sans-serif;
  padding: 0.5em;
}
.ex2a .name {
  color: black;
  background: white;
  font-family: "Marker Felt", cursive;
  font-size: 45pt;
  padding-top: 0.2em;
}
</style>
<div class="ex2a outer">
  <div class="boilerplate">
    Hi! My name is
  </div>
  <div class="name">
    Bob
  </div>
</div>

<p>
以下是标记，它并没有使用 Shadow DOM：
</p>
  <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;style&gt;</span>
</span><span class='line'>      <span class="nc">.outer</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="k">solid</span> <span class="nb">brown</span><span class="p">;</span>
</span><span class='line'>        <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
</span><span class='line'>        <span class="k">background</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'>        <span class="k">font-size</span><span class="o">:</span> <span class="m">20pt</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">12em</span><span class="p">;</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span> <span class="m">7em</span><span class="p">;</span>
</span><span class='line'>        <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nc">.boilerplate</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>        <span class="k">font-family</span><span class="o">:</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'>        <span class="k">padding</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nc">.name</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">color</span><span class="o">:</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>        <span class="k">background</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>        <span class="k">font-family</span><span class="o">:</span> <span class="s2">&quot;Marker Felt&quot;</span><span class="o">,</span> <span class="k">cursive</span><span class="p">;</span>
</span><span class='line'>        <span class="k">font-size</span><span class="o">:</span> <span class="m">45pt</span><span class="p">;</span>
</span><span class='line'>        <span class="k">padding-top</span><span class="o">:</span> <span class="m">0.2em</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;outer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;boilerplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          Hi! My name is
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          Bob
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
因为 DOM 树缺乏封装，整个姓名卡的结构都暴露给了文档。若是页面里其他的元素不经意间使用了同样的类名来设置样式或操作脚本，那么我们可就有苦日子过了。
</p>

<p>我们完全可以避免这样的情况发生</p>

<h3 id="toc-separation-hide">第一步：隐藏展现细节</h3>

<p>
从语义上讲，我们可能只关心如下内容：
</p>

<ul>
<li>这是一个姓名卡。</li>
<li>名称是 “Bob”。</li>
</ul>

<p>
首先，我们先按照最接近我们关心的语义的方式来书写标记：
</p>

  <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;nameTag&quot;</span><span class="nt">&gt;</span>Bob<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
接下来我们把所有和展现相关的样式和 div 都放入一个 <code>&lt;template&gt;</code> 元素内：
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;nameTag&quot;</span><span class="nt">&gt;</span>Bob<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;template</span> <span class="na">id=</span><span class="s">&quot;nameTagTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;style&gt;</span>
</span><span class='line'>      <span class="nc">.outer</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="k">solid</span> <span class="nb">brown</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="err">…</span> <span class="err">和上面一样</span> <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;outer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;boilerplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          Hi! My name is
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          Bob
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/template&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
此时，‘Bob’ 是唯一被渲染的内容。因为我们把与展现有关的 DOM 元素移动到了一个 <code>&lt;template&gt;</code> 元素内，它们是不会被渲染的，但是它们<em>能够</em>通过 JavaScript 来访问。接下来我们就会通过脚本来填充 shadow root：
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">shadow</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#nameTag&#39;</span><span class="p">).</span><span class="nx">createShadowRoot</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#nameTagTemplate&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">shadow</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">template</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote class="commentary talkinghead">
Templates，和 Shadow DOM 一样，也是一个完善中的规范。Chrome Canary 支持 <code>&lt;template&gt;</code> 元素。你也可以选择使用 <span class="property">innerHTML</span>，<span class="method">appendChild</span>，<span class="method">getElementById</span> 这样的方法或属性来填充 shadow root。本文主要讨论 Shadow DOM，所以不会涉及太多 template 元素的工作原理。如果你想了解更多 <code>&lt;template&gt;</code> 的内容，查看 <a href="http://Robing.github.io/tutorials/webcomponents/template/">HTML 的新 Template 标签</a>.
</blockquote>

<p>
我们建立了一个 shadow root，姓名卡被再次渲染。如果你右键点击标签，选择检查元素，你将看到漂亮并富于语义的标记：
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;nameTag&quot;</span><span class="nt">&gt;</span>Bob<span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
这便印证了，通过使用 Shadow DOM，我们可以将展现细节隐藏在姓名卡中。展现细节被封装在了 Shadow DOM 中。
</p>

<h3 id="toc-separation-separate">
第二步：从展现中分离内容
</h3>

<p>
现在我们的姓名卡可以从页面中隐藏展现细节了，但展现和内容却没有分离，
因为虽然内容(就是姓名“Bob”)显示在了页面里，但这个姓名是从 shadow root 中复制过来的。
如果我们想修改姓名卡的姓名，就得修改两个地方，这就可能造成它们不同步。
</p>

<p>
HTML 元素是可组合的 — 比如说你可以把一个按钮放进一个表格里。
在这儿我们就需要使用组合：姓名卡必须将红色背景，“Hi!”文本，和标签内容组合在一起。
</p>

<p>
作为组件作者的你定义了一个 <code>&lt;content&gt;</code> 元素来完成部件的组合工作。
这为部件的展现创建了一个插入点(insertion point)，而该插入点将挑选 shadow host 里的内容显示到该点所在的位置上。
</p>

<p>
如果我们把 Shadow DOM 里的标记做如下修改：
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;template</span> <span class="na">id=</span><span class="s">&quot;nameTagTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;style&gt;</span>
</span><span class='line'>        <span class="err">…</span>
</span><span class='line'>      <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;outer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;boilerplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          Hi! My name is
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;content&gt;&lt;/content&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/template&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
当姓名卡渲染后，shadow host 的内容便投射(projected)到 <code>&lt;content&gt;</code> 元素出现的地方。
</p>

<p>
现在文档的结构简单了，因为名称只出现在了一个地方——就在文档里。如果想更新用户名称，你只需写：
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    document.querySelector(&#39;#nameTag&#39;).textContent = &#39;Shellie&#39;;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
这就足够了。浏览器会自动更新渲染的姓名卡，因为我们把姓名卡的内容<b>投射</b>到了 <code>&lt;content&gt;</code> 元素内。
</p>

<div id="ex2b">

<p>下面是使用 Shadow DOM 的实例：</p>

<div id="ex2bNameTag">Bob</div>

<p>
<label for="ex2bNewName">新名字：</label>
<input name="ex2bNewName" value="Shellie">
<button onclick="updateClicked('#ex2bNameTag', 'input[name=ex2bNewName]');">更新</button>
</p>

<script>
function updateClicked(nameTagSelector, textBoxSelector) {
  var text = document.querySelector(textBoxSelector);
  document.querySelector(nameTagSelector).textContent = text.value;
  text.value = '';
  text.focus();
}
</script>


<script>
(function () {
  if (!window.HTMLTemplateElement ||
      !HTMLElement.prototype.webkitCreateShadowRoot) {
    remove('#ex2b');
    return;
  }

  var shadow = document.querySelector('#ex2bNameTag').webkitCreateShadowRoot();
  var template = document.querySelector('#ex2bNameTagTemplate');
  shadow.appendChild(template.content);
  template.remove();
})();
</script>
</div>


<p>
我们实现了分离内容和展现的目的。<b>内容在文档内；展现在 Shadow DOM 里。</b>
当需要更新的时候，浏览器会自动保持它们的同步。
</p>

<h3 id="toc-separation-profit">第三步：福利</h3>

<p>
通过分离内容和展现，我们可以简化操作内容的代码——在姓名卡的例子中，代码只需要和包含一个 <code>&lt;div&gt;</code> 标签的简单结构打交道，而不必操作多个标签。
</p>

<p>
如果此时我们修改展现，就不用动任何代码了！
</p>

<p>
比方说，我们想将姓名卡本地化。因为它仍然是一个姓名卡，所以它在文档中的语义内容没有改变：
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;nameTag&quot;</span><span class="nt">&gt;</span>Bob<span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
设置 shadow root 的代码保持不变。只是放进 shadow root 中的内容变了：
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;template</span> <span class="na">id=</span><span class="s">&quot;nameTagTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;style&gt;</span>
</span><span class='line'>      <span class="nc">.outer</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="k">solid</span> <span class="nb">pink</span><span class="p">;</span>
</span><span class='line'>        <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
</span><span class='line'>        <span class="k">background</span><span class="o">:</span> <span class="sx">url(sakura.jpg)</span><span class="p">;</span>
</span><span class='line'>        <span class="k">font-size</span><span class="o">:</span> <span class="m">20pt</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">12em</span><span class="p">;</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span> <span class="m">7em</span><span class="p">;</span>
</span><span class='line'>        <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>        <span class="k">font-family</span><span class="o">:</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'>        <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nc">.name</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">font-size</span><span class="o">:</span> <span class="m">45pt</span><span class="p">;</span>
</span><span class='line'>        <span class="k">font-weight</span><span class="o">:</span> <span class="k">normal</span><span class="p">;</span>
</span><span class='line'>        <span class="k">margin-top</span><span class="o">:</span> <span class="m">0.8em</span><span class="p">;</span>
</span><span class='line'>        <span class="k">padding-top</span><span class="o">:</span> <span class="m">0.2em</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;outer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;content&gt;&lt;/content&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        と申します。
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/template&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
现在我们有了一个日文的姓名卡：
</p>
<div id="ex3a">
<div id="ex3aNameTag">Bob</div>
<p>
<label for="ex3aNewName">新名字：</label>
<input name="ex3aNewName" value="基子">
<button onclick="updateClicked('#ex3aNameTag', 'input[name=ex3aNewName]');">更新</button>
</p>
</div>

<script>
(function () {
  if (!window.HTMLTemplateElement ||
      !HTMLElement.prototype.webkitCreateShadowRoot) {
    remove('#ex3a');
    document.write('<img src="SS4.png" alt="A name tag with a watercolor painting of cherry blossoms on it.">');
    return;
  }
  var shadow = document.querySelector('#ex3aNameTag').webkitCreateShadowRoot();
  var template = document.querySelector('#ex3aNameTagTemplate');
  shadow.appendChild(template.content);
  template.remove();
})();
</script>

<p class="small-notice">
<a href="http://www.flickr.com/photos/mikedowman/5621169045/">背景图片来自于 Mike Dowman，</a> 基于 Creative Commons license 重用。
</p>

<p>
在当今的 web 环境下这是一个巨大的进步，因为更新名字的代码可以依赖于简单且一致的<em>组件</em>的结构，
<strong>而无需知晓用于渲染的结构。</strong> 比如说从渲染的角度考虑，在英文中名称应该出现在第二行(在 “Hi! My name is” 之后)，但是在日文中需要出现在第一行(在 “と申します” 之前)。从更新名称的角度来说，这个区别对于语义没有任何意义，因此名称更新代码并不需要了解这些细节。
</p>

<h2 id="toc-projection">额外福利：高级投射</h2>

<p>
在上面的例子中，<code>&lt;content&gt;</code> 元素挑选了 shadow host 的所有内容。通过使用
<span class="attribute">select</span> 特性，你可以控制 content 元素投射的内容。你也可以使用多个 content 元素。
</p>

<p>
比如说，如果你有一个包含如下内容的文档：
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;nameTag&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;first&quot;</span><span class="nt">&gt;</span>Bob<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div&gt;</span>B. Love<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;email&quot;</span><span class="nt">&gt;</span>bob@<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>
shadow root 使用 CSS 选择器来选择特定内容：
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;background: purple; padding: 1em;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;color: red;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;.first&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;color: yellow;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;div&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;color: blue;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;.email&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p class="notice"><b>注意：</b> <span class="attribute">select</span> 只能选择 host 节点的直接子元素。也就是说，你不能选择后代元素(例如 <code>select="table tr"</code>)。</p>

<p>
<code>&lt;div class="email"&gt;</code> 元素同时被 <code>&lt;content select="div"&gt;</code> 和 <code>&lt;content
select=".email"&gt;</code> 元素所匹配。那 Bob 的电子邮件地址会出现多少次，都是什么颜色？
</p>

<div id="ex4a">

<div id="ex4aNameTag">
  <div class="first">Bob</div>
  <div>B. Love</div>
  <div class="email">bob@</div>
</div>


</div>

<script>
(function () {
  if (!window.HTMLTemplateElement ||
      !HTMLElement.prototype.webkitCreateShadowRoot) {
    remove('#ex4a');
    document.write('<img src="SS5.png" alt="The rendered result. Bob’s email appears in yellow." id="ex4a">');
    return;
  }
  var shadow = document.querySelector('#ex4aNameTag').webkitCreateShadowRoot();
  var template = document.querySelector('#ex4aNameTagTemplate');
  shadow.appendChild(template.content);
  template.remove();
})();
</script>

<p>
答案是：Bob 的电子邮件地址仅显示一次，并且是黄色的。
</p>

<p>
为什么会这样？那些了解 Shadow DOM 原理的人们都知道，把最终渲染在屏幕上的内容构建成一棵树，就像举办一个盛大的舞会。
<strong>content 元素就是将文档中的内容邀请到 Shadow DOM 渲染舞会的请柬。</strong>
这些请柬按顺序发放；谁能收到邀请取决于请柬的地址(即 <span class="attribute">select</span> 特性。)，
一旦收到邀请，便会接受请柬(有谁不会呢？！)立即动身。如果接下来又有一封请柬发送到该地址，可现在家里没人，这个舞会也就去不了了。
</p>

<p>
在上面的例子中，<code>&lt;div class="email"&gt;</code> 同时匹配 <code>div</code> 选择器和 <code>.email</code> 选择器，但因为含有 <code>div</code> 选择器的 content 元素在文档中的位置靠前，
<code>&lt;div class="email"&gt;</code> 便去了黄色舞会，这样就没人去蓝色舞会了。
</p>

<p>
如果有内容<em>没有</em>被邀请参加任何舞会，那它就不会渲染。第一个例子中的 “Hello, world” 文本便属于这种情况。
这对于当你想彻底修改渲染内容时十分有效：在文档中书写语义模型，它能够被页面中的脚本访问到，但是基于渲染原因必须将它隐藏起来，使用 JavaScript 将它与 Shadow DOM 中的一个完全不同的渲染模型进行关联。
</p>

<p>
举个例子，HTML 有一个不错的日期选择器。如果你写下 <code>&lt;input
type="date"&gt;</code> 你将得到一个简洁的弹出式日历。但如果你想让用户为他们的<i>甜点</i>
岛旅行选择一段日期(你知道吗……岛上有红葡萄藤做的吊床。)，文档表面上是这么写的：
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;dateRangePicker&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;start&quot;</span><span class="nt">&gt;</span>Start:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;date&quot;</span> <span class="na">name=</span><span class="s">&quot;startDate&quot;</span> <span class="na">id=</span><span class="s">&quot;start&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;br&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;end&quot;</span><span class="nt">&gt;</span>End:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;date&quot;</span> <span class="na">name=</span><span class="s">&quot;endDate&quot;</span> <span class="na">id=</span><span class="s">&quot;end&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
但实际上会创建一个 Shadow DOM，在里面使用表格生成一个能够高亮日期范围的日历。
当用户点击日历中的日期，组件会更新输入框的起始日期和结束日期；当用户提交表单，两个输入框元素的值就会被提交。
</p>

<p>
你可能会奇怪，为什么我明知道 label 元素不会被渲染还去写它呢？
原因在于如果用户通过一个不支持 Shadow DOM 的浏览器来访问表单，
那么表单还是保证可用的，只是不太漂亮。最终看起来可能是这样的：
</p>

<div class="dateRangePicker">
  <label for="start">Start:</label>
  <input type="date" name="startDate" id="start">
  <br>
  <label for="end">End:</label>
  <input type="date" name="endDate" id="end">
</div>

<h2 id="toc-conclusion">你通过了 Shadow DOM 101</h2>

<p>
这里介绍的是 Shadow DOM 的基础——你通过了 Shadow DOM 101！
你可以使用 Shadow DOM 实现更多事情，比方说在一个 shadow host 内使用多个 shadow DOM，
或是出于封装的缘故来嵌套 shadow DOM，或是使用 Model-Driven Views (MDV) 和 Shadow DOM 来架构页面。
而且 Web 组件可不仅仅包含 Shadow DOM。使用 Web 组件的另一部分：自定义元素，你就可以用声明的方式来设置部件的 Shadow DOM，而不必去写脚本了。
</p>

<p>
我们将在后续文章中解释这些内容。好了，请在<a href="https://plus.google.com/103330502635338602217/posts">Google+ 上关注 Web 组件吧。</a>
</p>

<p class="small-notice">
感谢 <a href="http://Robing.github.io/profiles/#ericbidelman">Eric Bidelman，</a>Darin
Fisher，Dimitri Glazkov，Alex Komoroske，Alex Russell，和 <a href="http://Robing.github.io/profiles/#paulirish">Paul Irish</a> 对本教程早期版本提出的建议。
</p>


      </div>

]]></content>
  </entry>
  
</feed>
